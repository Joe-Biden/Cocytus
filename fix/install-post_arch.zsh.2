#!/usr/bin/zsh
##-------------
##--  author  > joe biden <ygrs.srgy@gmail.com>
##-- vim:nu:ai:et:ts=4:sw=4:ft=zsh:syn=zsh:fenc=utf8:foldmethod=marker
##-------------
##-- Installs / sets up many archlinux features and programs.
## pacman optimizations {{{
function config_pacman() {
    local config
    config="/etc/pacman.conf"
    sed -i -e '/# Misc options/a ILoveCandy' $config
    sed -i 's|^#Color|Color|' $config
    sed -i 's|^#VerbosePkgLists|VerbosePkgLists|' $config
    sed -i 's|^#UseSyslog|UseSyslog|' $config
    sed -i 's|^#TotalDownload|TotalDownload|' $config
    sed -i 's|^#\[multilib\]|\[multilib\]|' $config
    sed -i -e '/\[multilib\]/{n;d}' $config
    sed -i -e '/\[multilib\]/a Include = /etc/pacman.d/mirrorlist' $config
    pacman -Syy
    unset config
}
#}}}
## configure system {{{
function set_locale() {
    sed -i 's|^#en_US|en_US|' /etc/locale.gen
    locale-gen
    ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
    hwclock --systohc --utc
}
#}}}
## hostname {{{
function set_machine() {
    echo Cocytus > /etc/hostname
    sed -i 's|localhost|localhost   Cocytus|2' /etc/hosts
}
#}}}
## kernel {{{
function set_kern() {
    local config
    config="/etc/mkinitcpio.conf"
    echo "KEYMAP=\"us\"\nFONT=\"ter-p18b\"" > /etc/vconsole.conf
    sed -i 'S|MODULES=""|MODULES="vfat btrfs nvme dm_mod dm_crypt aes_x86_64 i915"|' $config
    sed -i 's|block filesystems|block encrypt lvm2 resume filesystems|' $config
    mkinitcpio -p linux
    unset config
}
#}}}
## uefi bootloader {{{
function set_boot_uefi() {
    local packages
    packages=( 'intel-ucode' 'linux' 'linux-headers' 'linux-firmware' 
               'linux-api-headers' 'util-linux' 'systemd' 'efibootmgr'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
    bootctl install
    [[ -d /boot/loader ]] || mkdir -p /boot/loader
    [[ -d /boot/loader/entries ]] || mkdir -p /boot/loader/entries
    local config
    config="/etc/loader/entries/cocytus.conf"
    echo -e "timeout 3\n"\
            "editor  1\n"\
            "default cocytus" > /boot/loader/loader.conf
    echo -e "title   Cocytus\n"\
            "linux   /vmlinuz-linux\n"\
            "initrd  /intel-ucode.img\n"\
            "/initrd  /initramfs-linux.img\n"\
            "options cryptdevice=PARTLABEL=Cocytus-cryptDsk:rootDsk root=LABEL=cocytus-root_fs rw i915.modeset=1 elevator=noop rootflags=subvol=Cocytus-root idle=nomwait" > $config
    unset packages
    unset config
}
#}}}
## bios bootloader {{{
function set_boot_bios() {
    local packages
    packages=( 'intel-ucode' 'linux' 'linux-headers' 'linux-firmware'
               'linux-api-headers' 'util-linux' 'systemd' 'efibootmgr'
               'syslinux' 'gptfdisk' 'efibootmgr'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
    local config
    config="/boot/syslinux/syslinux.cfg"
    [[ -d /boot/syslinux ]] || mkdir -p /boot/syslinux
    syslinux-install_update -iam
    cp $config ${config}.org
    echo -e "DEFAULT cocytus\n"\
            "PROMPT 0\n"\
            "TIMEOUT 30\n"\
            "UI menu.c32\n"\
            "MENU TITLE Arch Linux Bitchers\!\n\n"\
            "MENU COLOR border      30;44      #40ffffff #a0000000 std\n"\
            "MENU COLOR title       1;36;44    #9033ccff #a0000000 std\n"\
            "MENU COLOR sel         7;37;40    #e0ffffff #20ffffff all\n"\
            "MENU COLOR unsel       37;44      #50ffffff #a0000000 std\n"\
            "MENU COLOR help        37;40      #c0ffffff #a0000000 std\n"\
            "MENU COLOR timeout_msg 37;40      #80ffffff #00000000 std\n"\
            "MENU COLOR timeout     1;37;40    #c0ffffff #00000000 std\n"\
            "MENU COLOR msg07       37;40      #90ffffff #a0000000 std\n"\
            "MENU COLOR tabmsg      31;40      #30ffffff #00000000 std\n\n"\
            "LABEL cocytus\n"\
            "    MENU LABEL Cocytus base\n"\
            "    LINUX ../vmlinuz-linux\n"\
            "    INITRD ../intel-ucode.img,../initramfs-linux.img\n"\
            "    APPEND cryptdevice=PARTLABEL=Cocytus-cryptDsk:rootDsk root=LABEL=cocytus-root_fs rw i915.modeset=1 elevator=noop rootflags=subvol=Cocytus-root idle=nomwait\n\n"\
            "LABEL archiso\n"\
            "    MENU LABEL Archiso\n"\
            "    LINUX memdisk\n"\
            "    INITRD ../archlinux.iso\n"\
            "    APPEND iso vmalloc=2048M\n"\
            "LABEL hdt\n"\
            "    MENU LABEL HDT (Hardware Detection Tool)\n"\
            "    COM32 hdt.c32" > $config
    unset config
}
#}}}
## devel {{{
function install_devel() {
    local packages
    packages=( 'base-devel' 'git' 'bzr' 'subversion' 'mercurial' 'abs'
               )
    packages+=( 'multilib-devel' 'fakeroot' 'tk' 'jshon' 'make'
                'pkg-config' 'autoconf' 'automake' 'patch' 'ed'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit $_i; done
    unset packages
}
#}}}
## filesystem {{{
function install_filesystem() {
    local packages
    packages=( 'btrfs-progs' 'dosfstools' 'f2fs-tools' 'exfat-utils' 'fatsort'
               'hfsprogs' 'shfs-utils' 'squashfs-tools' 'sshfs' 'mtools'
               'reiserfsprogs' 'progsreiserfs' 'e2fsprogs' 'filesystem' 'jfsutils'
               'xfsprogs' 'cifs-utils' 'fuse' 'ntfs-3g' 'curlftpfs'
               'encfs' 'ecryptfs-utils' 'ext4magic' 'fuseiso' 'lib32-e2fsprogs'
               'shfs-utils' 'schroot' 'mtpfs' 'nfs-utils' 'libnfs'
               'nilfs-utils' 's3fs-fuse' 'curlftpfs'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## documentation {{{
function install_docs() {
    local packages
    packages=( 'arch-wiki-lite' 'arch-wiki-docs' 'bash-docs' 'freedesktop-docs'
               'gcc-docs' 'gconfmm-docs' 'glib2-docs' 'grails-docs' 'groovy-docs'
               'linux-docs' 'linux-grsec-docs' 'linux-lts-docs' 'linux-zen-docs'
               'mygui-docs' 'ogre-docs' 'pangomm-docs' 'php-docs' 'postgresql-docs'
               'python2-docs' 'python-docs' 'python-lxml-docs' 'python-webob-docs'
               'ruby-docs' 'scala-docs' 'zsh-doc' 'flac-doc' 'gap-doc' 'gtk-doc'
               'qt5-doc' 'sqlite-doc' 'vigra-doc' 'sagemath-doc' 'xorg-docs'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## networking tools {{{
function install_nets() {
    local packages
    packages=( 'systemd' 'wpa_supplicant' 'dialog'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
    local interface
    interface=`ip link | awk '/: wl/ {gsub(/:/,"") ; print $2}'`
    [[ -d /etc/systemd/network ]] || mkdir -p /etc/systemd/network
    echo -e "[Match]\nName=en*\n\n[Match]\nDHCP=ipv4" > /etc/systemd/network/en.network
    echo -e "[Match]\nName=wl*\n\n[Match]\nDHCP=ipv4" > /etc/systemd/network/wl.network
    systemctl enable systemd-networkd.service
    [[ -d /etc/wpa_supplicant ]] || mkdir -p /etc/wpa_supplicant
    echo -e "ctrl_interface=/var/run/wpa_supplicant\nctrl_interface_group=wheel\nupdate_config=1\nfast_reauth=1\nap_scan=1\n\nnetwork={\n    ssid=\"BHNTG852G11A2\"\n    psk=\"425517eb\"\n}\n\nnetwork={\n    ssid=\"CF Net\"\nkey_mgmt=NONE\n}" > /etc/wpa_supplicant/wpa_supplicant-${interface}.conf
    systemctl enable wpa_supplicant@"${interface}".conf
    unset interface
}
#}}}
## xorg server {{{
function install_xorg() {
    local packages
    packages=( 'xorg-server' 'xorg-server-common' 'xorg-server-utils' 'xorg-server-xdmx'
               'xorg-apps' 'xorg-xinit' 'xorg-appres' 'xorg-util-macros' 'xorg-utils'
               'xf86-input-synaptics' 'xf86-input-evdev'
        	   )
    ## nvidia gpu
    #packages+=( 'libvdpau' 'nvidia-libgl' 'nvidia-utils' 'nvidia-dkms' 'nvidia-settings' 'nvidia'
    #            'lib32-libvdpau' 'lib32-nvidia-libgl' 'lib32-nvidia-utils'
    #           )
    ## intel gpu
    packages+=( 'xf86-video-vesa' 'xf86-video-intel' 'intel-tbb' 'vulkan-intel'
                'libva-intel-driver' 'lib32-libva-intel-driver' 'libtxc_dxtn'
                'lib32-libtxc_dxtn' 'intel-opencl-runtime' 'cuda'
                )
    ## amd gpu old card
    #packages+=( 'xf86-video-ati'
    #            )
    ## amd gpu newer card
    #packages+=( 'xf86-video-amdgpu'
    #            )
    ## additions for video support
    packages+=( 'mesa' 'mesa-vdpau' 'mesa-demos' 'mesa-libgl'
                'glu' 'libva-intel-driver' 'libvdpau-va-gl'
                'lib32-mesa' 'lib32-mesa-vdpau' 'lib32-mesa-demos' 'lib32-mesa-libgl'
                'lib32-glu' 'lib32-libva-intel-driver'
                )
    packages+=( 'gst-plugins-base' 'gst-plugins-good' 'gst-libav' 'imagemagick'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## install fonts {{{
function install_fonts() {
    local packages
    packages=( 'ttf-bitstream-vera' 'ttf-cheapskate' 'ttf-dejavu' 'gsfonts' 
               'ttf-freefont' 'ttf-linux-libertine' 'ttf-oxygen' 'ttf-inconsolata'
               'opendesktop-fonts' 'ttf-anonymous-pro' 'ttf-droid' 'ttf-ionicons'
               'ttf-fira-mono' 'ttf-fira-sans' 'ttf-gentium' 'gnu-free-fonts'
               'ttf-liberation' 'ttf-linux-libertine-g' 'ttf-symbola' 'ttf-ubuntu-font-family'
               'fontconfig' 'freetype2' 'terminus-font'
               )
    packages+=( 'xorg-font-util' 'xorg-font-utils' 'xorg-fonts-100dpi' 'xorg-fonts-75dpi'
                'xorg-fonts-alias' 'xorg-fonts-encodings' 'xorg-fonts-misc' 'xorg-xlsfonts'
                'xorg-xfd' 'xorg-fonts-type1' 'xorg-fonts-cyrillic'
                )
    packages+=( 'ttf-arphic-ukai' 'ttf-arphic-uming' 'ttf-baekmuk' 'ttf-freebanglafont'
                'ttf-hannom' 'ttf-indic-otf' 'ttf-junicode' 'ttf-khmer' 'ttf-mph-2b-damase'
                'ttf-sazanami' 'ttf-tibetan-machine' 'ttf-tlwg' 'ttf-ubraille' 'ttf-hanazono'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## shell {{{
function install_shell() {
    local packages
    packages=( 'zsh' 'zsh-completions' 'zshdb' 'zsh-syntax-highlighting'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## archive {{{
function install_archive() {
    local packages
    packages=( 'bzip2' 'gzip' 'lz4' 'lzo' 'xz' 'zlib' 'gsm' 'libmspack' 'lzop' 'snappy'
               'p7zip' 'unrar' 'zip' 'avfs' 'blosc' 'libewf' 'lrzip' 'mac' 'ucl'
               'ecm-tools' 'rpmextract' 'unzip' 'libzip' 'zziplib' 'cpio' 'unp'
               'unarj' 'arj' 'atool' 'unace' 'libarchive'
               'lib32-bzip2' 'lib32-xz' 'lib32-zlib'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## editor {{{
function install_editor() {
    local packages
    ## vim editor & plugins
    packages=( 'vim' 'vim-runtime' 'vim-spell-en' 'vim-airline' 'vim-fugitive'
               'vim-nerdtree' 'vim-syntastic' 'vim-systemd' 'vimpager'
               )
    ## spell checking & stuffs
    packages+=( 'aspell' 'aspell-en' 'hunspell' 'hunspell-en' 'hyphen' 'hyphen-en'
                'libmythes' 'mythes-en' 'psiconv'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## power management {{{
function install_powman() {
    local packages
    packages=( 'cpupower' 'powertop' 'tlp' 'dkms' 'acpi' 'acpid' 'upower'
               'lm_sensors' 'libacpi' 'smartmontools' 'hddtemp' 'hdparm' 'sdparm'
               'inxi' 'dmidecode' 'file' 'net-tools' 'iproute2' 'usbutils'
               'systemd-sysvcompat'
               )
    ## for thinkpad
    #package+=( 'tp_smapi' 'tp_smapi-lts' 
    #           )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## make a simple statefull firewall {{{
function install_firewall() {
    local packages
    packages=( 'lvm2' 'cryptsetup' 'iptables'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
    local config
    config="/etc/iptables/iptables.rules"
    iptables -P FORWARD DROP && \
        iptables -P OUTPUT ACCEPT && \
        iptables -P INPUT DROP && \
        iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT && \
        iptables -A INPUT -i lo -j ACCEPT && \
        iptables -A INPUT -m conntrack --ctstate INVALID -j DROP && \
        iptables -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT && \
        iptables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP && \
        iptables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP && \
        iptables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable && \
        iptables -A INPUT -p tcp -j REJECT --reject-with tcp-reset && \
        iptables -A INPUT -j REJECT --reject-with icmp-proto-unreachable && \
        iptables -t raw -I PREROUTING -m rpfilter --invert -j DROP && \
        iptables -I TCP -p tcp -m recent --update --seconds 60 --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset && \
        iptables -D INPUT -p tcp -j REJECT --reject-with tcp-reset && \
        iptables -A INPUT -p tcp -m recent --set --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset && \
        iptables -I UDP -p udp -m recent --update --seconds 60 --name UDP-PORTSCAN -j REJECT --reject-with icmp-port-unreachable && \
        iptables -D INPUT -p udp -j REJECT --reject-with icmp-port-unreachable && \
        iptables -A INPUT -p udp -m recent --set --name UDP-PORTSCAN -j REJECT --reject-with icmp-port-unreachable
    iptables-save > $config
    systemctl enable tptables.service
    unset config
}
#}}}
## some other misc utilities {{{
function install_cli() {
    local packages
    ## most cli stuffs
    packages=( 'ranger' 'tree' 'wget' 'curl' 'lib32-curl' 'clamav' 'haveged'
               'pwgen' 'rogue' 'nethack' 'openssh' 'tmux' 'rsync' 'w3m'
               'youtube-dl' 'youtube-viewer' 'cowsay' 'asciidoc' 'octave' 'gnuplot'
               'htop' 'glances' 'rtorrent' 'finch'
               )
    ## music stuffs
    packages+=( 'mpd' 'mpc' 'ncmpcpp' 'libmpd' 'libmpdclient' 'python2-mpd'
                'mp3info' 'mpv' 'easytag'
                )
    ## audio formats
    packages+=( 'wavpack' 'mp3gain' 'flac' 'lib32-wavpack' 'lib32-flac'
                )
    ## crypto tools
    packages+=( 'cryptsetup' 'libgcrypt' 'libgpg-error' 'nettle' 'libcryptui' 'libcryptui'
                'libmcrypt' 'lib32-libgcrypt' 'lib32-nettle' 'lib32-libgpg-error'
                )
    ## optical support
    packages+=( 'dvd+rw-tools' 'libdvdread' 'cdrtools' 'dvdrtools'
                'lsdvd' 'libbluray' 'libdvdcss' 'libdvbpsi'
                )
    ## audio subsystem pulse w/alsa
    packages+=( 'alsa-firmware' 'alsa-lib' 'alsa-plugins' 'alsa-tools' 'alsa-utils' 'libao'
                'pulseaudio' 'pulseaudio-alsa' 'libpulse' 'libcanberra-pulse' 'pulseaudio-lirc'
                'libcanberra' 'pavucontrol'
                'lib32-alsa-lib' 'lib32-alsa-plugins' 'lib32-libcanberra-pulse'
                'lib32-libpulse' 'lib32-libcanberra'
                )
    ## mail
    packages+=( 'mutt' 'procmail' 'offlineimap' 'fetchmail' 'turses' 'weechat' 'irssi'
                'smtp-forwarder'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## gui tools {{{
function install_gui() {
    local packages
    packages=( 'feh' 'xorg-xcalc' 'xorg-xclock' 'luakit' 'blender' 'simplescreenrecorder'
               'lib32-simplescreenrecorder' 'luxblend25' 'galculator-gtk2'
               )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## multilib packages {{{
function install_multilib() {
    local packages
    packages=( 'lib32-acl' 'lib32-apitrace' 'lib32-attr' 'lib32-atk' 'lib32-cairo'
               'lib32-celt' 'lib32-db' 'lib32-libdbus' 'lib32-elfutils'
               'lib32-expat' 'lib32-flac' 'lib32-freetype2' 'lib32-fontconfig'
               'lib32-gdk-pixbuf2' 'lib32-gettext' 'lib32-giflib' 'lib32-glib2'
               'lib32-glibc' 'lib32-gmp' 'lib32-gnutls' 'lib32-gtk2' 'lib32-icu'
               'lib32-harfbuzz' 'lib32-jack' 'lib32-json-c' 'lib32-keyutils'
               'lib32-krb5' 'lib32-mpg123' 'lib32-ncurses' 'lib32-nspr' 'lib32-nss'
               'lib32-ocl-icd' 'lib32-openal' 'lib32-openssl' 'lib32-p11-kit'
               'lib32-pango' 'lib32-pcre' 'lib32-pixman' 'lib32-portaudio'
               'lib32-procps-ng' 'lib32-readline' 'lib32-sdl' 'lib32-sdl_image'
               'lib32-sdl_ttf' 'lib32-soundtouch' 'lib32-speex' 'lib32-speexdsp'
               'lib32-sqlite' 'lib32-systemd' 'lib32-libjpeg-turbo' 'lib32-tdb'
               'lib32-util-linux' 'lib32-v4l-utils' 'lib32-wayland'
               'lib32-wxgtk2.8' 'lib32-xcb-util'
               )
    packages+=( 'lib32-lcms' 'lib32-lcms2' 'lib32-libaio' 'lib32-libao'
                'lib32-libasyncns' 'lib32-libcap' 'lib32-libcups' 'lib32-libltdl'
                'lib32-libdrm' 'lib32-libffi' 'lib32-libglade' 'lib32-libice'
                'lib32-libidn' 'lib32-libldap' 'lib32-libmikmod'
                'lib32-libmng' 'lib32-libnl' 'lib32-libogg' 'lib32-libpcap'
                'lib32-libpciaccess' 'lib32-libphobos' 'lib32-libphobos-devel'
                'lib32-libpng' 'lib32-libsamplerate' 'lib32-libsm' 'lib32-libssh2'
                'lib32-libsndfile' 'lib32-libstdc++5' 'lib32-libtasn1'
                'lib32-libtiff' 'lib32-libtxc_dxtn' 'lib32-libusb'
                'lib32-libvorbis' 'lib32-libx11' 'lib32-libxau' 'lib32-libxcb'
                'lib32-libxcomposite' 'lib32-libxcursor' 'lib32-libxdamage'
                'lib32-libxdmcp' 'lib32-libxext' 'lib32-libxfixes' 'lib32-libxft'
                'lib32-libxi' 'lib32-libxinerama' 'lib32-libxml2' 'lib32-libxmu'
                'lib32-libxrandr' 'lib32-libxrender' 'lib32-libxshmfence'
                'lib32-libxslt' 'lib32-libxss' 'lib32-libxt' 'lib32-libxtst'
                'lib32-libxv' 'lib32-libxvmc' 'lib32-libxxf86vm' 'lib32-llvm'
                'lib32-llvm-libs'
                )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## programming packages {{{
function install_prgm() {
    local packages
    ## fortran
    packages=( 'gcc-fortran-multilib' 'libmatio'
               )
    ## lua
    packages+=( 'lua' 'lua-lpeg' 'lua-luajson' 'lua-filesystem' 'luarocks'
                'lua51' 'lua51-lpeg' 'lua51-luajson' 'lua51-filesystem' 'luarocks5.1'
                'lua52' 'lua52-lpeg' 'lua52-luajson' 'lua52-filesystem' 'luarocks5.2'
                'love' 'love08'
               )
    ## template
    #package+=( ''
    #           )
    for _i in "${packages[@]}"; do pacman -S --needed --asexplicit --noconfirm $_i; done
    unset packages
}
#}}}
## readlines {{{
function prompt_for_stuffs() {
    clear
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mOptimize pacman[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        config_pacman
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mSet time and date?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        set_locale
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mSet the hostname?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        set_machine
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall the kernel and headers?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        set_kern
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mSetup UEFI bootloader?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        set_boot_uefi
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mSetup BiOS bootloader?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        set_boot_bios
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall development tools?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_devel
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall support for different filesystems?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_filesystem
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall documentation?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_docs
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall and setup systemd networkd?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_nets
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall X11 display server?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_xorg
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall fonts?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_fonts
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall a proper shell?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_shell
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall archive and compression tools?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_archive
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall a proper editor?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_editor
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall power managemnt tools?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_powman
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall a proper firewall?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_firewall
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall some cli utilities and various sub systems?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_cli
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall some GUI tools?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_gui
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall 32-bit compatability?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m" 
    else
        install_multilib
        echo "  [1;32>>[0m [1;37mFinished...[0m" 
    fi
    ##------------------------------------------------------------------------------------------
    read "confirm? [1;34m>>>[0m [1;37mInstall some programming tools (hobby)?[0m [y|N]  "
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "  [1;31m>>[0m [1;37mSkipping...[0m"
        sleep 0.5s
    else
        install_prgm
        echo "  [1;32>>[0m [1;37mFinished...[0m"
        sleep 0.5s
    fi
    ##------------------------------------------------------------------------------------------
    echo -e "\n\n  [1;34m>>>[0m [1;37mCompleted...[0m"
    sleep 0.5s
}
#}}}
## Run the script {{{
if [[ $USER != "root" ]]; then
    echo -e " [1;32m>>>[0m [1;37mRoot privledges required![0m"
    exit 1
else
    prompt_for_stuffs
fi
##}}}

